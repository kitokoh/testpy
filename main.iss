; Script generated by tshe Inno Setup Script Wizardd.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Leopardo AI"
#define MyAppVersion "1.9"
#define MyAppPublisher "Leopardo, Inc."
#define MyAppURL "https://www.leopardo.com/"
#define MyAppExeName "main.exe"
#define MyAppDataDir "saadiya" 

#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
AppId={{6DE0F7C2-28A6-4695-941A-5D96CD9555CD}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName=
ArchitecturesAllowed=x86 x64

ArchitecturesInstallIn64BitMode=x64 arm64
ChangesAssociations=yes
DisableProgramGroupPage=yes
LicenseFile=compil\licence.txt
InfoBeforeFile=compil\beforinstall.txt
InfoAfterFile=compil\afterinstall.txt
OutputBaseFilename=Leopardo-ai
SetupIconFile=resources\icons\robot-icons-30504-Windows.ico

Compression=lzma
SolidCompression=yes
WizardStyle=modern
AppCopyright=Copyright © 2025 {#MyAppPublisher}. All rights reserved.
MinVersion=10.0.0
AlwaysShowDirOnReadyPage=yes
PrivilegesRequired=admin

OutputManifestFile=setup.log
UninstallDisplayIcon=resources\robot-icons-30504-Windows.ico
OutputDir=LeopardoAI-Installer
UninstallDisplayName={#MyAppName} v{#MyAppVersion} Uninstall

; Custom window images
WizardImageFile=resources\icons\robot-icons-30504.bmp
WizardSmallImageFile=resources\icons\robot-icons-30504.bmp

[Messages]
BeveledLabel=Leopardo: Simplify your marketing with AI!
WelcomeLabel=Welcome to the Leopardo AI v{#MyAppVersion} Setup.
StatusInstalling=Installing...
StatusDownloaded=Download completed for %s
ButtonInstall=Start Installation
ButtonFinish=Finish and Launch Leopardo AI

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "armenian"; MessagesFile: "compiler:Languages\Armenian.isl"
Name: "bulgarian"; MessagesFile: "compiler:Languages\Bulgarian.isl"
Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
;Name: "hungarian"; MessagesFile: "compiler:Languages\Hungarian.isl"
Name: "icelandic"; MessagesFile: "compiler:Languages\Icelandic.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
;Name: "korean"; MessagesFile: "compiler:Languages\Korean.isl"
Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "slovak"; MessagesFile: "compiler:Languages\Slovak.isl"
Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "turkish"; MessagesFile: "compiler:Languages\Turkish.isl"
Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "startmenuicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"
Name: "allusers"; Description: "Install for all users"; GroupDescription: "Installation Type:"; Flags: exclusive
Name: "currentuser"; Description: "Install for current user only"; GroupDescription: "Installation Type:"; Flags: exclusive unchecked

[Files]
Source: "resources\data\*"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\data"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\demoData\*"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\demoData"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "lesClesNova360\icons\exeCle\*"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\tools"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\wademoData\*"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\wademoData"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\key.key"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\"; Flags: ignoreversion  
Source: "resources\settings.json"; DestDir: "{userappdata}\{#MyAppDataDir}\resources"; Flags: ignoreversion
Source: "resources\lang\*"; DestDir: "{userappdata}\{#MyAppDataDir}\resources\lang"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\lang.json"; DestDir: "{userappdata}\{#MyAppDataDir}\resources"; Flags: ignoreversion
Source: "resources\icons\*"; DestDir: "{app}\resources\icons"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\images\*"; DestDir: "{app}\resources\images"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\linkeding\*"; DestDir: "{app}\resources\linkeding"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\gifs\*"; DestDir: "{app}\resources\gifs"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "resources\sounds\*"; DestDir: "{app}\resources\sounds"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "dist\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "installFBrobotPy\*"; DestDir: "{userappdata}\{#MyAppDataDir}\installFBrobotPy"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\adsPro\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\adsPro\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\AutoBlog\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\AutoBlog\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\branding\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\branding\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\chatBot\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\chatBot\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\emailing\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\emailing\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\insta\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\insta\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\linkeding\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\linkeding\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\pinterest\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\pinterest\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\reddit\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\reddit\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\snapchat\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\snapchat\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\tiktok\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\tiktok\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\twitter\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\twitter\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\whasapping\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\whasapping\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "ModulesUI\youtube\installwhattsaping\*"; DestDir: "{userappdata}\{#MyAppDataDir}\ModulesUI\youtube\installwhattsaping"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "nova360.ico"; DestDir: "{app}"; Flags: ignoreversion 

[Code]
const
    PythonURL = 'https://www.python.org/ftp/python/3.11.0/python-3.11.0-amd64.exe';
    GitURL = 'https://github.com/git-for-windows/git/releases/download/v2.42.0.windows.1/Git-2.42.0-64-bit.exe';

var
    TempDir: String; // Déclaration de la variable TempDir

function IsPythonInstalled(): Boolean;
var
    ResultCode: Integer;
    VersionOutput: String;
    PythonVersionFile: String;
    FileContents: TStringList;
begin
    if not DirExists(TempDir) then
        ForceDirectories(TempDir);

    PythonVersionFile := TempDir + '\python_version.txt';

    if Exec('cmd.exe', '/C python --version > "' + PythonVersionFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
        if FileExists(PythonVersionFile) then
        begin
            FileContents := TStringList.Create;
            try
                FileContents.LoadFromFile(PythonVersionFile);
                VersionOutput := FileContents.Text;
                Result := Pos('3.11', VersionOutput) > 0; // Vérifie la version
            finally
                FileContents.Free;
            end;
        end
        else
        begin
            Log('Erreur: Le fichier python_version.txt n’existe pas');
            Result := False;
        end;
    end
    else
    begin
        Log('Erreur: Impossible d’exécuter la commande python --version');
        Result := False;
    end;
end;

function IsGitInstalled(): Boolean;
var
    ResultCode: Integer;
    VersionOutput: String;
    GitVersionFile: String;
    FileContents: TStringList;
begin
    if not DirExists(TempDir) then
        ForceDirectories(TempDir);

    GitVersionFile := TempDir + '\git_version.txt';

    if Exec('cmd.exe', '/C git --version > "' + GitVersionFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
        if FileExists(GitVersionFile) then
        begin
            FileContents := TStringList.Create;
            try
                FileContents.LoadFromFile(GitVersionFile);
                VersionOutput := FileContents.Text;
                Result := Pos('2.42', VersionOutput) > 0; // Vérifie la version
            finally
                FileContents.Free;
            end;
        end
        else
        begin
            Log('Erreur: Le fichier git_version.txt n’existe pas');
            Result := False;
        end;
    end
    else
    begin
        Log('Erreur: Impossible d’exécuter la commande git --version');
        Result := False;
    end;
end;

procedure InitializeWizard();
begin
    TempDir := ExpandConstant('{tmp}') + '\InstallDependencies'; // Initialisation de TempDir
end;

[Registry]
Root: HKLM; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKLM; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKLM; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKLM; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""
Root: HKLM; Subkey: "Software\MyApp"; ValueType: string; ValueName: "Config"; ValueData: "Data"; Tasks: allusers
Root: HKLM; Subkey: "Software\{#MyAppName}\AutoUpdate"; ValueType: string; ValueName: "Enabled"; ValueData: "True"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\{#MyAppName}"; ValueType: string; ValueName: "Language"; ValueData: "fr"; Flags: uninsdeletekey
Root: HKLM; Subkey: "Software\{#MyAppName}\UsageStats"; ValueType: dword; ValueName: "LaunchCount"; ValueData: "0"; Flags: uninsdeletekey

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "Launch {#MyAppName}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{app}\temp\*.*"



[CustomMessages]
CreateShortcutsMsg=Would you like to create keyboard shortcuts for common actions?
EnableLogAnalysis=Enable installation log analysis?
ControlCenterIntegration=Integrate with remote control center for management?
SelectLogLocation=Please select a location to save the installation logs.
EnableAPIAccess=Enable API access for third-party integrations?
AdditionalComponents=Would you like to install additional components for extended functionality?
EnableAutoUpdate=Enable automatic updates for future versions?
CompatWarning=This software may not be fully compatible with versions of Windows prior to 10.
CustomizeAppearance=Would you like to customize the software's appearance post-installation?
